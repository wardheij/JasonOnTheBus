; table extension required for messaging
extensions [table]

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  pass
  pass_list
  target
  shortest
  try
  
  ; Messaging variables for week 3
  master_id
  passenger_count
  received_message
  message_sender
  message_contents
  message_count
  
  desired_target
]
 
globals [graph]

to init-buses
  ; Initialize your agents here.
  
  set master_id 24
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.

  ask buses 
  [
    if previous_stop = -1 
    [
      set try -10
      
      if bus_id < 47
      [
        add-bus 1
      ]
      set target bus_id - 24 
    ]
    
    if current_stop = bus_id - 24 
    [
      set pass_list get-passengers-at-stop current_stop
      if length pass_list > 0
      [
        set pass item 0 get-passengers-at-stop current_stop
        
        pick-up-passenger item 0 pass
        
        set target item 1 pass
      ]
    ]

    if length bus_passengers > 0
    [
      if current_stop = item 1 item 0 bus_passengers
      [
        drop-off-passenger item 0 item 0 bus_passengers
        set target bus_id - 24
      ]
    ]
    
    if current_stop = target 
    [
      stop
    ]
    
    
    ; Without links
;    travel-to target
    
    ; With links
    if current_stop = try and not (current_stop = -1)
    [
      set try -10
    ]


    ifelse not (previous_stop = -1)
    [
      ifelse current_stop = -1
      [
        ifelse member? target item previous_stop graph
        [
          travel-to target
        ]
        [
          if try = -10
          [
            ifelse current_stop = -1
            [
              set try one-of item previous_stop graph
            ]
            [
              set try one-of item current_stop graph
            ]
          ]
          travel-to try
        ]
      ]
      [
        ifelse member? target item current_stop graph
        [
          travel-to target
        ]
        [
          if try = -10
          [
            set try one-of item current_stop graph
          ]
          travel-to try
        ]
      ]
      
    ]
    [
      if try = -10
      [
        set try one-of item 3 graph
      ]
      travel-to try
      
    ]
    
    ; MASTER AGENT
    if bus_id = master_id [
      get-message
      
    ]
    
   
    ; send a message to the master if a bus carries passengers reporting passenger count
    if length bus_passengers > 0 [
      message-to master_id
    ]
    

  ]

end

<<<<<<< HEAD
to message-to [to_bus_id]
  
  ; obtain passenger count
  set passenger_count length bus_passengers
  
  ; create message dictionary containing update on the current status of the bus.
  ; status updates like these are useful for messages sent by slaves to the master.
  let dict table:make 
  table:put dict "passenger count" passenger_count
  table:put dict "target" target
  table:put dict "passengers" bus_passengers
  table:put dict "current stop" current_stop
  table:put dict "previous stop" previous_stop
  
  ; This is simply an example of a message containing simple bus information. If desired, this message 
  ; structure may be expanded indefinitely by adding fields. 
  ; for instance, if we desire that the master should be able to send commands to slave buses, we might 
  ;     1. add a field containing a target destination for the recipient of the message;
  ;     2. create a new messaging function specifically for sending target commands, where the only fields are 
  ;        the commands from the master to the slave bus
  ;
  ; this process may be repeated with any number of fields for any purpose. Hence, this communication 
  ; infrastructure may be used for any purpose by retrieving the desired field from the dict.
  
  ; send message to required bus
  send-message to_bus_id dict
  
end


to get-message
  
  ; only process messages if any exist
  if length inbox > 0 [ 
    
    ; calculate number of messages received    
    set message_count length inbox
    
    ; select last message from inbox
    set received_message item (message_count - 1) inbox
    
    ; select the sender ID and message contents from the message
    set message_sender item 0 received_message
    set message_contents item 2 received_message 
    
    print table:get message_contents "target"
    
  ]
    
=======
to sort-lists [routes]
  ; @routes is a list of lists
  ; sorts the route lists based on their first item
  let sorted_routes sort-by [item 0 ?1 < item 0 ?2] routes 
  print routes
  print sorted_routes
>>>>>>> origin/master
end

