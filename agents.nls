buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  pass
  pass_list
  target
  shortest
  try
]
 
globals [graph]

to init-buses
  ; Initialize your agents here.

  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.

  ask buses 
  [
    if previous_stop = -1 
    [
      set try -10
      
      if bus_id < 47
      [
        add-bus 1
      ]
      set target bus_id - 24 
    ]
    
    if current_stop = bus_id - 24 
    [
      set pass_list get-passengers-at-stop current_stop
      if length pass_list > 0
      [
        set pass item 0 get-passengers-at-stop current_stop
        
        pick-up-passenger item 0 pass
        
        set target item 1 pass
      ]
    ]

    if length bus_passengers > 0
    [
      if current_stop = item 1 item 0 bus_passengers
      [
        drop-off-passenger item 0 item 0 bus_passengers
        set target bus_id - 24
      ]
    ]
    
    if current_stop = target 
    [
      stop
    ]
    
    
    ; Without links
;    travel-to target
    
    ; With links
    if current_stop = try and not (current_stop = -1)
    [
      set try -10
    ]


    ifelse not (previous_stop = -1)
    [
      ifelse current_stop = -1
      [
        ifelse member? target item previous_stop graph
        [
          travel-to target
        ]
        [
          if try = -10
          [
            ifelse current_stop = -1
            [
              set try one-of item previous_stop graph
            ]
            [
              set try one-of item current_stop graph
            ]
          ]
          travel-to try
        ]
      ]
      [
        ifelse member? target item current_stop graph
        [
          travel-to target
        ]
        [
          if try = -10
          [
            set try one-of item current_stop graph
          ]
          travel-to try
        ]
      ]
      
    ]
    [
      if try = -10
      [
        set try one-of item 3 graph
      ]
      travel-to try
      
    ]

  ]

end

to sort-lists [routes]
  ; @routes is a list of lists
  ; sorts the route lists based on their first item
  let sorted_routes sort-by [item 0 ?1 < item 0 ?2] routes 
  print routes
  print sorted_routes
end

