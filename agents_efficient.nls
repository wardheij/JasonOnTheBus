; table extension required for messaging
extensions [table]

buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  pass
  pass_list
  
  ; Local variables for determining the target and a path
  target
  path
  
  ; Where was this bus spawned
  original
  
  ; How many buses are spawned
  number_of_buses
  
  ; What is the bus size
  bus_size
  
  ; Messaging variables
  send_next_tick
  master_id
  votes
  
  ; Used to find the amount of stops
  network_size
  
  ; Path cache
  cache_path
  
  ; List of claimed passengers
  claims
  
  ; State of the bus
  state
]
 
globals [graph]

to init-buses  
  ; General variables
  set path []
  set target current_stop
  set original current_stop    
  set send_next_tick []
  
  ; Determine and set bus_size
  if bus_type = 1
  [
    set bus_size 12
  ]
  if bus_type = 2
  [
    set bus_size 60
  ]
  if bus_type = 3
  [
    set bus_size 150
  ]
  
  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
  
  ; Variables required for counting passengers and such
  set network_size length graph
  set master_id network_size
  
  set number_of_buses number_of_buses + 1
  
  ; Set the cache.
  set cache_path table:make
  
  ; Set the claim list to zeros. Else, wait for commands
  ifelse bus_id = master_id
  [
    set claims []
    set votes 0
    set state "go"

    let i 0
    while [i < network_size]
    [
      if i != original
      [
        set claims lput (list 0 i) claims
      ]
      set i i + 1
    ]
  ]
  [
    set state "wait"
  ]
end

to execute-actions

  let total_passengers total-passengers
  
  do-messages
  
  ; Do move if:
  ; - There are enough passengers
  ; - You have passengers
  ; - You are not at a stop
  ; - There are passengers on your current path
  if total_passengers > 0 or length bus_passengers > 0 or current_stop = -1 or passenger_on_path
  [
    if state = "go"
    [
      do-strat-2
    ]
    
    if state = "go"
    [
      move
    ]
  ]
  
  ; Don't vote, just do it. This prevents 4000+ messages from being sent
  if bus_id = master_id
  [
    do-add-buses
  ]
end

; Are there any passengers on our current path?
to-report passenger_on_path 
  if current_stop != -1 and length get-passengers-at-stop current_stop > 0
  [
    report true
  ]
  foreach path
  [
    if length get-passengers-at-stop ? > 0
    [
      report true
    ]
  ]
  report false
end

; Create message dictionary containing update on the current status of the bus, then send it.
to message-to [to_bus_id key_list value_list]
  let dict table:make 

  let i 0
  while [i < length key_list]
  [
    let key item i key_list
    let value item i value_list
    
    table:put dict key value
    
    set i i + 1
  ]
  
  ; send message to required bus
  send-message to_bus_id dict
end

; Reports the average occupancy of all buses.
to-report occupancy
  let total 0
  let amount 0
  
  ask buses 
  [
    set amount amount + 1
    set total total + (length bus_passengers / bus_size)
  ]
  
  ifelse amount = 0
  [
    report 0
  ]
  [
    report total / amount
  ]
end

; Reports the total bus volume.
to-report bus-volume
  let total 0
  
  ask buses 
  [
    set total total + bus_size
  ]
  report total
end

; Reports the total amount of passengers waiting at stops.
to-report total-passengers
  let total 0
  
  if ticks != 0 
  [
    let i 0
    while [i < 24]
    [
      set total total + length get-passengers-at-stop i
      set i i + 1
    ]
  ]
  report total
end

; Handles all incoming messages. Master also might still need to send some.
to do-messages
  
  ; Are there any messsages that still need to be sent?
  if bus_id = master_id and not empty? send_next_tick
  [
    foreach send_next_tick
    [
      get-and-set-claim first ? last ?
    ]
    set send_next_tick []
  ]
  
  ; Only process messages if any exist
  if length inbox > 0 
  [     
    foreach inbox 
    [
      set inbox remove ? inbox
      let sender item 1 ?
      let message last ?
      
      if table:has-key? message "vote"
      [
        set votes votes + 1
      ]
      
      if table:has-key? message "where"
      [
        let bus_to_size table:get message "where"
        
        get-and-set-claim sender bus_to_size
      ]
      
      if table:has-key? message "go"
      [
        set state "go"
        set target table:get message "go"
      ]
    ]

    ; OH GREAT DICTATOR, WHAT DO WE DO
    if bus_id = master_id
    [
      ; if master is the only bus, the master is a dictator and determines whether a bus is added
      ; for #buses > 1, we take a plurality vote on whether to add buses
      ifelse number_of_buses = 1
      [
        dictator-vote
      ]
      [
        plurality-vote
      ]
      
      set votes 0
    ]
  ]
end

; Decide whether or not to add a new bus, based on the number of votes recieved by the master agent.
; When more than 25% of the buses vote 'pro' at the same time, a bus is added. 
; Note: not voting counts as a vote against, in order to send a minimum number of messages.
to plurality-vote
  if votes > (0.25 * number_of_buses)
  [
    do-add-buses
  ] 
end

; Master agent makes sure there are at least [network_size] buses 
to dictator-vote
  let i 0
  while [i < network_size]
  [
    add-bus 2
    set send_next_tick lput (list (number_of_buses + master_id + i) 60) send_next_tick
    set i i + 1
  ]
  
  set number_of_buses number_of_buses + network_size
end

; Vote for the addition of a bus if a bus observes more than 8 waiting passengers at its current stop.
to request-add-bus
  if not (current_stop = -1)
  [
    if length get-passengers-at-stop current_stop > 8 
    [
      message-to master_id ["vote"] ["yes"]
    ]
  ]
end

; Get the stop that has the least claims, update the claims and message the bus to go to the stop
to get-and-set-claim [bus_to bus_to_size]
  set claims sort-destinations claims
  
  let value (first first claims) + bus_to_size
  let bus_stop last first claims
  
  set claims replace-item 0 claims (list value bus_stop)
  
  message-to bus_to ["go"] (list bus_stop)

end

; Adds an amount of busses that corresponds to the amount of passengers waiting at stops.
to do-add-buses 
  let total_passengers total-passengers
  
  let bus_ratio int ((total_passengers - (number_of_buses * 60)) / 60)
  
  if bus_ratio > 1
  [
    let i 0
    while [i < bus_ratio]
    [
      add-bus 2
      set send_next_tick lput (list (number_of_buses + master_id + i) 60) send_next_tick
      set i i + 1
    ]
    
    set number_of_buses number_of_buses + bus_ratio
  ]
end

; destinations is a list of lists
; sorts the route lists based on their first item
to-report sort-destinations [destinations]
  report sort-by [first ?1 < first ?2] destinations 
end

; Find the destination based on a priority queue;
; - Add neighbours to queue [distance [list_of_path]]
; - Sort queue
; - If target is found, stop
to-report get-path
  let index (target * 24) + current_stop
  
  ; Cache hit. A* is not nessecary.
  if table:has-key? cache_path index
  [
    report table:get cache_path index
  ]
  
  let destinations []
  
  foreach item current_stop graph
  [
    ; If target is among neighbours, path to target is target, add to cache
    if ? = target
    [
      let return lput target path
      table:put cache_path index return
      report return
    ]
    
    ; If not, start A*
    let dist get-distance current_stop ?
    set destinations lput (list dist (list ?)) destinations    
  ]
  

  loop
  [
    set destinations sort-destinations destinations
    
    let this_path (last (first destinations))
    let this_place last this_path
    let this_dist (first (first destinations))
    
    ; Pop from queue
    set destinations but-first destinations
    
    ; Check neighbours
    foreach item this_place graph
    [
      ; Stop when the target is found, add to cache
      if ? = target
      [
        let return lput target this_path
        table:put cache_path index return
        report return
      ]
    
      ; Update queue
      let dist get-distance this_place ? + this_dist
      set destinations lput (list dist (lput ? this_path)) destinations
    ]
  ]  
end

; Basis for strategy 2
to do-strat-2
  
  ; Check if there are any passengers on board that should be dropped at the current stop
  check-for-drop
  
  ; If we are at the transfer-hub
  if current_stop = original
  [
    if target = original
    [
      ; Drop all passengers
      foreach bus_passengers 
      [
        drop-off-passenger first ?
      ]
      
      ; Ask the master where to go
      message-to master_id ["where"] (list bus_size)
      set state "wait"
    ]
    
    ; Get the new path
    if current_stop != target
    [
      set path get-path
    ]
  ]
  
  ; If arrived at destination, set a new one
  if target = current_stop
  [
    set target original
  ]
  
  ; Always check for pickup first, then fill the bus with transfers.
  if state = "go"
  [
    check-for-pickup
  
    if current_stop != -1 and target = original
    [
      let i 0
      let limit min list (bus_size - length bus_passengers) (length get-passengers-at-stop current_stop)
      
      ; Pick up all passengers, untill either the bus is full or there are no more passengers
      while [i < limit]
      [
        pick-up-passenger first first get-passengers-at-stop current_stop
        set i i + 1
      ]
    ]
  ]
  
end

; Moves a single bus along a path. If there is no path, get one
to move
  ; Update path if nessesary
  if not empty? path and first path = current_stop 
  [
    set path but-first path
  ]
  
  ; If there is no updated target
  if not (current_stop = target)
  [
    ; Get the path to target if there is no path
    if empty? path
    [
      set path get-path  
    ]
    
    ; Move along the path
    travel-to first path
  ]
end

; Check if a passenger currently in the bus can be dropped off at the current stop.
to check-for-drop
  foreach bus_passengers
  [
    if current_stop = item 1 ?
    [
      drop-off-passenger first ?
    ]
    
  ]
end

; Check if there are any passengers at the current stop with a destination on the bus' path list and if so, pick 'em up. 
to check-for-pickup
  ifelse current_stop = -1
  [
    stop
  ]
  [
    foreach get-passengers-at-stop current_stop
    [
      if length bus_passengers = bus_size
      [
        stop
      ]
      if (member? item 1 ? path)
      [
        pick-up-passenger first ?
      ]
      
    ]
  ] 
end